/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * To publish a driver to Maven local:
 *     ./gradlew -PPUBLISHING [driver_name]:clean [driver_name]:publishToMavenLocal
 *
 * To publish a driver to Bintray:
 * Configure the following values in your local.properties file:
 *     bintray.user=your_bintray_user_name
 *     bintray.apikey=your_bintray_api_key
 *     bintray.gpg.password=your_pgp_password
 * proper values and run
 *     ./gradlew -PPUBLISHING [driver_name]:clean [driver_name]:bintrayUpload
 *
 * Additionally, add the -PSNAPSHOT flag to replace artifact version names with "SNAPSHOT". Note
 * that bintrayUpload tasks will not upload the artifact if this flag is used.
 */

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
}

String publicationName = 'driverPublish'
boolean snapshot = hasProperty "SNAPSHOT"

subprojects {
    if (!project.findProperty("ARTIFACT_VERSION")) {
        return
    }

    apply plugin: 'com.android.library'

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    def artifactVersion = snapshot ? "LATEST" : ARTIFACT_VERSION

    publishing.publications {
        "$publicationName"(MavenPublication) {
            groupId 'jpuderer.android.things.drivers'
            artifactId "driver-$project.name"
            version artifactVersion
            artifact sourceJar
            artifact("$buildDir/outputs/aar/$project.name-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (it.group != null
                            && it.name != null && !"unspecified".equals(it.name)
                            && it.version != null && !"unspecified".equals(it.version)) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    bintray {
        user = properties.getProperty("bintray.user")
        key = properties.getProperty("bintray.apikey")
        publications = [publicationName]

        publish = true
        dryRun = snapshot

        pkg {
            repo = 'jpuderer-things-drivers'
            name = "jpuderer-things-driver-$project.name"
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/jpuderer/jpuderer-things-drivers'
            version {
                name = artifactVersion
                gpg {
                    sign = true
                    passphrase = properties.getProperty("bintray.gpg.password")
                }
            }
        }
    }

    afterEvaluate {
        tasks.withType(PublishToMavenRepository).all { publishTask ->
            publishTask.dependsOn build
        }
        tasks.withType(PublishToMavenLocal).all { publishTask ->
            publishTask.dependsOn build
        }
    }
}
